// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UITestAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WorkflowSettings")]
    public partial class WorkflowSettingsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "WorkflowSettings.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "WorkflowSettings", "A short summary of the feature", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("User log into Dispute Tracking Application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("User should be able to see Dashboard in Application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Workflow Settings")]
        [NUnit.Framework.CategoryAttribute("Add")]
        public virtual void WorkflowSettings()
        {
            string[] tagsOfScenario = new string[] {
                    "Add"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Settings", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 10
 testRunner.Given("User clicks the Profile Icon on Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
 testRunner.And("User selects the Workflow Settings Field from the dropdown menu of Profile Icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "UI Controls"});
                table107.AddRow(new string[] {
                            "Add"});
                table107.AddRow(new string[] {
                            "Edit"});
                table107.AddRow(new string[] {
                            "Delete"});
                table107.AddRow(new string[] {
                            "Download Letter"});
                table107.AddRow(new string[] {
                            "Action"});
                table107.AddRow(new string[] {
                            "ID"});
                table107.AddRow(new string[] {
                            "Workflow"});
                table107.AddRow(new string[] {
                            "Refresh"});
#line 12
 testRunner.And("User validates the following UI Controls on Workflow Settings Page", ((string)(null)), table107, "And ");
#line hidden
#line 22
 testRunner.And("User clicks the Add Workflow Setting on on Workflow Settings Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "Controls"});
                table108.AddRow(new string[] {
                            "Settings"});
                table108.AddRow(new string[] {
                            "Event Triggers"});
                table108.AddRow(new string[] {
                            "Self-Service Verbiage"});
                table108.AddRow(new string[] {
                            "Close"});
                table108.AddRow(new string[] {
                            "Save"});
#line 23
 testRunner.And("User validates the following Controls on Edit Setting Dialog", ((string)(null)), table108, "And ");
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table109.AddRow(new string[] {
                            "Workflow"});
                table109.AddRow(new string[] {
                            "Publish"});
                table109.AddRow(new string[] {
                            "Allow Customer Access"});
                table109.AddRow(new string[] {
                            "Search By"});
                table109.AddRow(new string[] {
                            "Send Notifications"});
                table109.AddRow(new string[] {
                            "Distribution List"});
                table109.AddRow(new string[] {
                            "Transaction Type"});
                table109.AddRow(new string[] {
                            "Account Types Allowed"});
                table109.AddRow(new string[] {
                            "Closed Account Status"});
                table109.AddRow(new string[] {
                            "Add Transactions"});
                table109.AddRow(new string[] {
                            "Allow Manual Transactions"});
                table109.AddRow(new string[] {
                            "Allow user to copy / duplicate transactions"});
                table109.AddRow(new string[] {
                            "Copy Description to Merchant Field by Default"});
                table109.AddRow(new string[] {
                            "Merchant Copy Source Field Name"});
                table109.AddRow(new string[] {
                            "Transaction Filter Condition"});
                table109.AddRow(new string[] {
                            "Transaction Not Allowed Condition"});
                table109.AddRow(new string[] {
                            "Show Fraud / Non-Fraud Option"});
                table109.AddRow(new string[] {
                            "Disable Customer Edit"});
                table109.AddRow(new string[] {
                            "Has Questionnaire"});
                table109.AddRow(new string[] {
                            "Has Provisional Credit Calculation"});
                table109.AddRow(new string[] {
                            "Show Customer Type"});
                table109.AddRow(new string[] {
                            "Hide Comments And Resolution"});
                table109.AddRow(new string[] {
                            "Reimburse Fees"});
                table109.AddRow(new string[] {
                            "Transaction Code Filter"});
                table109.AddRow(new string[] {
                            "GL Reference"});
                table109.AddRow(new string[] {
                            "Interest Posting GL Reference"});
                table109.AddRow(new string[] {
                            "Compliance Regulation Screen"});
                table109.AddRow(new string[] {
                            "Dispute Screen Type"});
                table109.AddRow(new string[] {
                            "Email Template Reference"});
                table109.AddRow(new string[] {
                            "Confirmation Email Template Reference"});
                table109.AddRow(new string[] {
                            "Post Submission Automation Reference"});
                table109.AddRow(new string[] {
                            "Automation Reference On Submission Complete"});
                table109.AddRow(new string[] {
                            "Submission Screen Template"});
#line 30
 testRunner.And("User validates the following Fields in Settings Page on Edit Setting Dialog", ((string)(null)), table109, "And ");
#line hidden
#line 65
 testRunner.And("User clicks the Event Triggers in Settings Page on Edit Setting Dialog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "UI Controls"});
                table110.AddRow(new string[] {
                            "Action"});
                table110.AddRow(new string[] {
                            "Trigger Name"});
                table110.AddRow(new string[] {
                            "Trigger Event Type"});
                table110.AddRow(new string[] {
                            "Add"});
#line 66
 testRunner.And("User validates the following Controls in Event Triggers on Edit Setting Dialog", ((string)(null)), table110, "And ");
#line hidden
#line 72
 testRunner.And("User clicks the Add Event Trigger in Event Triggers Page on on Edit Setting Dialo" +
                        "g", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table111.AddRow(new string[] {
                            "Trigger Name"});
                table111.AddRow(new string[] {
                            "Trigger Event Type"});
                table111.AddRow(new string[] {
                            "Additional Condition (search for below)"});
                table111.AddRow(new string[] {
                            "Account Type"});
                table111.AddRow(new string[] {
                            "Automation Reference"});
                table111.AddRow(new string[] {
                            "Letter Template Reference"});
                table111.AddRow(new string[] {
                            "GL Reference"});
                table111.AddRow(new string[] {
                            "Run Automation"});
                table111.AddRow(new string[] {
                            "AutomationReference"});
                table111.AddRow(new string[] {
                            "Send Email Notification"});
                table111.AddRow(new string[] {
                            "Email Letter Template Reference"});
                table111.AddRow(new string[] {
                            "Email Distribution List"});
                table111.AddRow(new string[] {
                            "Close"});
                table111.AddRow(new string[] {
                            "Save"});
#line 73
 testRunner.And("User validates the following Fields in Add Trigger Page on Edit Setting Dialog", ((string)(null)), table111, "And ");
#line hidden
#line 89
 testRunner.And("User clicks the Close Button on Add Trigger Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("User clicks the Self-Service Verbiage in Settings Page on Edit Setting Dialog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fileds"});
                table112.AddRow(new string[] {
                            "Self-Service Portal Submission Completion Title"});
                table112.AddRow(new string[] {
                            "Self-Service Portal Submission Completion Note"});
                table112.AddRow(new string[] {
                            "Close"});
                table112.AddRow(new string[] {
                            "Save"});
#line 91
 testRunner.And("User validates the following Fields in Self-Service Verbiage Page on Edit Setting" +
                        " Dialog", ((string)(null)), table112, "And ");
#line hidden
#line 97
 testRunner.And("User clicks the Close Button on Self-Service Verbiage Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
 testRunner.And("User clicks the Dashboard Icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
