// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UITestAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CompanyDetails")]
    public partial class CompanyDetailsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CompanyDetails.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CompanyDetails", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
 #line hidden
#line 5
  testRunner.Given("User log into Dispute Tracking Application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
  testRunner.And("User should be able to see Dashboard in Application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Company Details")]
        [NUnit.Framework.CategoryAttribute("CompanyDetails")]
        public virtual void CompanyDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "CompanyDetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Company Details", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 11
    testRunner.Given("User clicks the Profile Icon on the Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.And("User selects the Company Details Field from the dropdown menu of ProfileIcon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "UI Controls"});
                table5.AddRow(new string[] {
                            "Basic Info"});
                table5.AddRow(new string[] {
                            "General Settings"});
                table5.AddRow(new string[] {
                            "Lookup Values"});
                table5.AddRow(new string[] {
                            "Style"});
                table5.AddRow(new string[] {
                            "Save"});
#line 13
 testRunner.And("User validates the following UI Controls on Company Details Page", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basic Info")]
        public virtual void BasicInfo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic Info", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 23
    testRunner.And("User selects the Basic Info button on Company Details Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table6.AddRow(new string[] {
                            "Company Name"});
                table6.AddRow(new string[] {
                            "Address"});
                table6.AddRow(new string[] {
                            "City"});
                table6.AddRow(new string[] {
                            "State"});
                table6.AddRow(new string[] {
                            "Zip"});
                table6.AddRow(new string[] {
                            "Phone"});
                table6.AddRow(new string[] {
                            "Email"});
                table6.AddRow(new string[] {
                            "Support Email"});
                table6.AddRow(new string[] {
                            "Email Distribution List"});
                table6.AddRow(new string[] {
                            "Time Zone"});
                table6.AddRow(new string[] {
                            "Read only Questionnaires"});
#line 24
 testRunner.And("User validates the following fields on Basic Info Page", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("General Settings")]
        public virtual void GeneralSettings()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("General Settings", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 42
    testRunner.Given("User clicks on the General Settings button on Company Details Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table7.AddRow(new string[] {
                            "Signature Pad"});
                table7.AddRow(new string[] {
                            "Idle Timeout (minutes)"});
                table7.AddRow(new string[] {
                            "Statement Cycle"});
                table7.AddRow(new string[] {
                            "Company Logo"});
#line 43
    testRunner.And("User validates the following fields on General Settings Page", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Lookup Values")]
        public virtual void LookupValues()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lookup Values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 54
   testRunner.Given("User clicks on the Lookup Values button on Company Details Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "UI Controls"});
                table8.AddRow(new string[] {
                            "Add  Button"});
                table8.AddRow(new string[] {
                            "Edit  Button"});
                table8.AddRow(new string[] {
                            "Delete  Button"});
#line 55
   testRunner.And("User validates the following UI Controls on Lookup Values Page", ((string)(null)), table8, "And ");
#line hidden
#line 61
 testRunner.And("User clicks on Add Submission Status Button on Company Details Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table9.AddRow(new string[] {
                            "Submission Dispute Status"});
                table9.AddRow(new string[] {
                            "Save"});
                table9.AddRow(new string[] {
                            "Close"});
#line 62
 testRunner.And("User validates the following fields on Company Details Page", ((string)(null)), table9, "And ");
#line hidden
#line 68
 testRunner.And("User clicks on Add Source Button on Company Details Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table10.AddRow(new string[] {
                            "Breach Source (example Home Depot)"});
                table10.AddRow(new string[] {
                            "Save"});
                table10.AddRow(new string[] {
                            "Close"});
#line 69
 testRunner.And("User validates the following fields on Company Details Page", ((string)(null)), table10, "And ");
#line hidden
#line 75
 testRunner.And("User clicks on Add Account Type Button on Company Details Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table11.AddRow(new string[] {
                            "Add Account Type"});
                table11.AddRow(new string[] {
                            "Display Name"});
                table11.AddRow(new string[] {
                            "Save"});
                table11.AddRow(new string[] {
                            "Close"});
#line 76
 testRunner.And("User validates the following fields on Company Details Page", ((string)(null)), table11, "And ");
#line hidden
#line 83
 testRunner.And("User clicks on Add Dispute Research Detail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table12.AddRow(new string[] {
                            "Add Dispute Research Detail"});
                table12.AddRow(new string[] {
                            "Save"});
                table12.AddRow(new string[] {
                            "Close"});
#line 84
 testRunner.And("User validates the following fields on Company Details Page", ((string)(null)), table12, "And ");
#line hidden
#line 90
 testRunner.And("User clicks on Add Branch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table13.AddRow(new string[] {
                            "Add Branch"});
                table13.AddRow(new string[] {
                            "Save"});
                table13.AddRow(new string[] {
                            "Close"});
#line 91
 testRunner.And("User validates the following fields on Company Details Page", ((string)(null)), table13, "And ");
#line hidden
#line 97
 testRunner.And("User clicks on Charter/Binding", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table14.AddRow(new string[] {
                            "Add Charter / Branding"});
                table14.AddRow(new string[] {
                            "Save"});
                table14.AddRow(new string[] {
                            "Close"});
#line 98
 testRunner.And("User validates the following fields on Company Details Page", ((string)(null)), table14, "And ");
#line hidden
#line 104
 testRunner.And("User clicks on Contacts Lookup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table15.AddRow(new string[] {
                            "Contacts Lookup"});
                table15.AddRow(new string[] {
                            "Reference"});
                table15.AddRow(new string[] {
                            "Save"});
                table15.AddRow(new string[] {
                            "Close"});
#line 105
 testRunner.And("User validates the following fields on Company Details Page", ((string)(null)), table15, "And ");
#line hidden
#line 112
 testRunner.And("User clicks on Transaction Decline Reason", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table16.AddRow(new string[] {
                            "Transaction Decline Reason"});
                table16.AddRow(new string[] {
                            "Save"});
                table16.AddRow(new string[] {
                            "Close"});
#line 113
 testRunner.And("User validates the following fields on Company Details Page", ((string)(null)), table16, "And ");
#line hidden
#line 120
 testRunner.And("User clicks on Batch Reporting Reference", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table17.AddRow(new string[] {
                            "Batch Reporting Reference"});
                table17.AddRow(new string[] {
                            "Save"});
                table17.AddRow(new string[] {
                            "Close"});
#line 121
 testRunner.And("User validates the following fields on Company Details Page", ((string)(null)), table17, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Style")]
        public virtual void Style()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Style", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 129
   testRunner.Given("User clicks on Style Button on Company Details Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "UI Controls"});
                table18.AddRow(new string[] {
                            "Primary Buttons Color"});
                table18.AddRow(new string[] {
                            "Secondary Buttons Color"});
                table18.AddRow(new string[] {
                            "Primary Buttons Font Color"});
                table18.AddRow(new string[] {
                            "Secondary Buttons Font Color"});
                table18.AddRow(new string[] {
                            "Save"});
#line 130
   testRunner.And("User validates the following UI Controls on Company Details Page", ((string)(null)), table18, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
