Write a function that returns the sum of two numbers

function solution(param1, param2) {
return param1 + param2;
}



---------------------------------------------------------------------
Given a year, return the century it is in. The first century spans from the year 1 up to and including the year 100,
 the second - from the year 101 up to and including the year 200, etc.
 
 function solution(year) {
return Math.ceil(year/100);
}


----------------------------------------------------------------------
Given the string, check if it is a palindrome.
For inputString = "aabaa", the output should be
solution(inputString) = true;
For inputString = "abac", the output should be
solution(inputString) = false;
For inputString = "a", the output should be
solution(inputString) = true.

return inputString.SequenceEqual(inputString.Reverse());



-------------------------------------------------------------------------
Given an array of integers, find the pair of adjacent elements that has the largest product and return that product.

Example

For inputArray = [3, 6, -2, -5, 7, 3], the output should be
solution(inputArray) = 21.

7 and 3 produce the largest product.

int solution(int[] inputArray) {
    var max = inputArray[0]*inputArray[1];
for(var i=1; i < inputArray.Length - 1; i++ ){
    
    max = Math.Max(max, inputArray[i]*inputArray[i+1]);
}
return max;
}


-------------------------------------------------------------------------------
Below we will define an n-interesting polygon. Your task is to find the area of a polygon for a given n.

A 1-interesting polygon is just a square with a side of length 1. An n-interesting polygon is obtained by taking the n - 1-interesting polygon
 and appending 1-interesting polygons to its rim, side by side. You can see the 1-, 2-, 3- and 4-interesting polygons in the picture below.

int solution(int n) {
return (n*n)+((n-1)*(n-1));
}


---------------------------------------------------------------------------------
Ratiorg got statues of different sizes as a present from CodeMaster for his birthday,
 each statue having an non-negative integer size. Since he likes to make things perfect,
 he wants to arrange them from smallest to largest so that each statue will be bigger than the previous one exactly by 1.
 He may need some additional statues to be able to accomplish that. Help him figure out the minimum number of additional statues needed.
 
 int solution(int[] statues) {
int n= 0;
 Array.Sort(statues);
 for(int i = 0; i < statues.Length - 1; i++)
 {
     if(statues[i+1] - statues[i] > 1)
     {
         n = n + statues[i+1] - statues[i]-1;
     }
 }
 return n;
}

-------------------------------------------------------------------------------------------
Given a sequence of integers as an array, determine whether it is possible to obtain a strictly increasing sequence by
 removing no more than one element from the array.

Note: sequence a0, a1, ..., an is considered to be a strictly increasing if a0 < a1 < ... < an. Sequence containing only one element
 is also considered to be strictly increasing.